假设类仅包含一个指针数据成员，并且这个指针指向一个动态分配内存的对象。
默认的析构函数不对指针进行任何操作（一个好理由就是释放这个指针就必须删除自身）。
而且，复制构造函数和operator=都不复制指针所指向的对象，而是简单的复制指针的值。
这样一来，就得到了两个类实例：
浅复制： 实例包含的指针和被复制对象的指针指向同一个对象。
此时 改变 原对象的指针所指对象的值，浅复制指针所指对象的值也改变。
因为这是同一个对象，浅复制指针依然依赖于原指针所指对象

深复制： 实例包含的指针和被复制对象的指针分别指向两个相同的对象
此时 改变 原对象的指针所指对象的值，深复制指针所指对象的值不会改变。
因为这是两个对象，深复制指针独立于原指针所指对象。

当一个类含有数据成员为指针并且深复制很重要的时候，
一般的做法就是必须实现析构函数、复制构造函数和operator=。